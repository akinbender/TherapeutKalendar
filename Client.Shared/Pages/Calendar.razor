@page "/calendar/{TherapistId:guid}"
@using TherapeutKalendar.Shared.Protos
@inject TherapeutKalendar.Shared.Protos.TerminService.TerminServiceClient TerminClient

<h3>Wochenübersicht: Termine des Therapeuten</h3>

@if (availableTermins.Count > 0)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Tag</th>
                <th>Start</th>
                <th>Ende</th>
                <th>Status</th>
                <th>Patient</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var day in weekDays)
            {
                var terminsForDay = availableTermins.Where(t => t.StartTime.ToDateTime().Date == day.Date).OrderBy(t => t.StartTime);
                <tr>
                    <td>@day.ToString("dddd, dd.MM.")</td>
                    <td colspan="4">
                        @if (!terminsForDay.Any())
                        {
                            <span class="text-muted">Keine Termine</span>
                        }
                        else
                        {
                            <table class="table table-sm mb-0">
                                @foreach (var termin in terminsForDay)
                                {
                                    <tr>
                                        <td>@termin.StartTime.ToDateTime().ToString("HH:mm")</td>
                                        <td>@termin.EndTime.ToDateTime().ToString("HH:mm")</td>
                                        <td>@termin.Status</td>
                                        <td>@termin.PatientName</td>
                                    </tr>
                                }
                            </table>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (loaded)
{
    <div class="alert alert-info">Keine Termine für diese Woche gefunden.</div>
}

@code {
    private List<DateTime> weekDays = new();
    private List<CalendarTermin> weekTermins = new();
    private bool loaded = false;

    private List<DateTime> GetCurrentWeekDays()
    {
        var today = DateTime.Today;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        return Enumerable.Range(0, 7).Select(i => startOfWeek.AddDays(i)).ToList();
    }

    private class CalendarTermin
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Status { get; set; } = "";
        public string PatientName { get; set; } = "";
    }

    [Parameter]
    public Guid TherapistId { get; set; }

    private List<TerminProto> availableTermins = new();
    protected override async Task OnParametersSetAsync()
    {
        // Fetch next available slots until end of this week
        var today = DateTime.Today;
        var endOfWeek = today.AddDays(7 - (int)today.DayOfWeek);
        var response = await TerminClient.GetNextAvailableAsync(new NextAvailableRequest
        {
            TherapistId = TherapistId.ToString(),
            Till = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(DateTime.SpecifyKind(endOfWeek, DateTimeKind.Utc))
        });
        availableTermins = response.Termins.ToList();
    }
}

